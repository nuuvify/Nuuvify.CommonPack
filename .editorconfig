# https://editorconfig.org/

; This file aims to achieve a more beneficial rule structure for maintaining high code quality and consistency!
; Currently targeting .NET 8 solutions.

root = true

# General settings for all files
[*]
charset = utf-8
insert_final_newline = true
indent_style = space
indent_size = 4
trim_trailing_whitespace = true
spelling_exclusion_path = spelling.dic

;========================================================================================================================================================================

# C# files
[*.cs]

## Indentation settings
indent_size = 4
tab_width = 4


## .NET Coding Conventions
### Group using directives and sort System.* directives first
dotnet_sort_system_directives_first = true

### Separate using directive groups
dotnet_separate_import_directive_groups = false

### Qualification preferences
#### Do not enforce qualification with 'this.' to avoid verbosity
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

### Language keywords vs BCL types preferences
#### Prefer language keywords (e.g., int) over BCL types (e.g., Int32)
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

### Parentheses preferences
#### Use parentheses for clarity in complex expressions
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:warning
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning

### Modifier preferences
#### Require accessibility modifiers for non-interface members
dotnet_style_require_accessibility_modifiers = for_non_interface_members:error

### Expression-level preferences
#### Prefer concise expressions and initializers
dotnet_style_coalesce_expression = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_namespace_match_folder = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_object_initializer = true:suggestion
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_prefer_collection_expression = when_types_loosely_match:suggestion
dotnet_style_prefer_compound_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:warning
dotnet_style_prefer_simplified_interpolation = true:warning

### Field preferences
#### Prefer readonly fields where possible
dotnet_style_readonly_field = true:warning

### Parameter preferences
#### Enforce warnings for unused parameters in non-public methods
dotnet_code_quality_unused_parameters = non_public:warning
dotnet_diagnostic.IDE0060.severity = warning

### Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none

### New line preferences
dotnet_style_allow_multiple_blank_lines_experimental = false:warning
dotnet_style_allow_statement_immediately_after_block_experimental = true:silent


## C# Coding Conventions
### var preferences
#### Prefer less verbosity
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion

### Expression-bodied members
#### Allow expression-bodied members for conciseness
csharp_style_expression_bodied_accessors = true:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_lambdas = when_on_single_line:suggestion
csharp_style_expression_bodied_local_functions = false:silent
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:silent

### Pattern matching preferences
#### Prefer pattern matching for readability and performance
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_prefer_extended_property_pattern = true:suggestion
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_pattern_matching = true:silent
csharp_style_prefer_switch_expression = true:suggestion

### Null-checking preferences
#### Prefer conditional delegate calls for null checks
csharp_style_conditional_delegate_call = true:suggestion

### Modifier preferences
#### Prefer static local functions and readonly struct members
csharp_prefer_static_local_function = true:suggestion
csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion
dotnet_diagnostic.IDE0036.severity = warning
csharp_style_prefer_readonly_struct = true:suggestion
csharp_style_prefer_readonly_struct_member = true:suggestion

### Code-block preferences
#### Enforce braces for all code blocks for clarity
csharp_prefer_braces = true:silent
csharp_prefer_simple_using_statement = true:suggestion
csharp_style_namespace_declarations = file_scoped:warning
csharp_style_prefer_method_group_conversion = true:suggestion
csharp_style_prefer_primary_constructors = true:suggestion
csharp_style_prefer_top_level_statements = true:silent

### Expression-level preferences
#### Prefer concise and modern C# features
csharp_prefer_simple_default_expression = true:warning
csharp_style_deconstructed_variable_declaration = false:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_local_over_anonymous_function = true:suggestion
csharp_style_prefer_null_check_over_type_check = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_prefer_tuple_swap = true:suggestion
csharp_style_prefer_utf8_string_literals = true:suggestion
csharp_style_throw_expression = false:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:warning
csharp_style_unused_value_expression_statement_preference = discard_variable:warning

### 'using' directive preferences
#### Place using directives outside namespace declarations
csharp_using_directive_placement = outside_namespace:warning
#### New line preferences
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true:silent
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true:silent
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true:silent
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true:silent
csharp_style_allow_embedded_statements_on_same_line_experimental = true:silent


## C# Formatting Conventions
### New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

### Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

### Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

### Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true


## .NET Naming Conventions
### Naming rules
dotnet_naming_rule.interface_should_be_begins_with_i.severity = warning
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i
dotnet_naming_rule.types_should_be_pascal_case.severity = warning
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case
dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

### Naming styles
dotnet_naming_style.begins_with_i.capitalization = pascal_case
dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.pascal_case.capitalization = pascal_case

## .NET Symbol Conventions
dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers =
dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers =
dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers =


## CAT-Brazil General Conventions
### Name all constant fields using PascalCase
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.constant_fields.applicable_kinds = field
dotnet_naming_symbols.constant_fields.required_modifiers = const
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

### Static fields should have s_ prefix
dotnet_naming_rule.static_fields_should_have_prefix.severity = warning
dotnet_naming_rule.static_fields_should_have_prefix.symbols = static_fields
dotnet_naming_rule.static_fields_should_have_prefix.style = static_prefix_style
dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.required_modifiers = static
dotnet_naming_symbols.static_fields.applicable_accessibilities = private, internal, private_protected
dotnet_naming_style.static_prefix_style.required_prefix = s_
dotnet_naming_style.static_prefix_style.capitalization = camel_case

### Internal and private fields should be _camelCase
dotnet_naming_rule.camel_case_for_private_internal_fields.severity = warning
dotnet_naming_rule.camel_case_for_private_internal_fields.symbols = private_internal_fields
dotnet_naming_rule.camel_case_for_private_internal_fields.style = camel_case_underscore_style
dotnet_naming_symbols.private_internal_fields.applicable_kinds = field
dotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal
csharp_prefer_static_anonymous_function = true:suggestion


## Code Analysis Quality Rules 
### Design rules
#### Do not declare static members on generic types
dotnet_diagnostic.CA1000.severity = error
#### Types that own disposable fields should be disposable
dotnet_diagnostic.CA1001.severity = error
#### Do not expose generic lists
dotnet_diagnostic.CA1002.severity = warning
#### Use generic event handler instances
dotnet_diagnostic.CA1003.severity = warning
#### Avoid excessive parameters on generic types
dotnet_diagnostic.CA1005.severity = warning
#### Enums should have zero (default/none) value
dotnet_diagnostic.CA1008.severity = warning
#### Collections should implement generic interface
dotnet_diagnostic.CA1010.severity = warning
#### Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = error
#### Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.CA1018.severity = warning
#### Define accessors for attribute arguments
dotnet_diagnostic.CA1019.severity = warning
#### Avoid out parameters
dotnet_diagnostic.CA1021.severity = suggestion
#### Use properties where appropriate
dotnet_diagnostic.CA1024.severity = none
#### Do not catch general exception types
dotnet_diagnostic.CA1031.severity = warning
#### Implement standard exception constructors
dotnet_diagnostic.CA1032.severity = warning
#### Interface methods should be callable by child types
dotnet_diagnostic.CA1033.severity = warning
#### Avoid empty interfaces
dotnet_diagnostic.CA1040.severity = warning
#### Provide ObsoleteAttribute message
dotnet_diagnostic.CA1041.severity = warning
#### Do not pass types by reference
dotnet_diagnostic.CA1045.severity = warning
#### Do not declare visible instance fields
dotnet_diagnostic.CA1051.severity = warning
#### Static holder types should be Static or NotInheritable
dotnet_diagnostic.CA1052.severity = warning
#### Static holder types should not have default constructors
dotnet_diagnostic.CA1053.severity = warning
#### URI parameters should not be strings
dotnet_diagnostic.CA1054.severity = suggestion
#### URI return values should not be strings
dotnet_diagnostic.CA1055.severity = suggestion
#### URI properties should not be strings
dotnet_diagnostic.CA1056.severity = none
#### Types should not extend certain base types
dotnet_diagnostic.CA1058.severity = error
#### Do not hide base class methods
dotnet_diagnostic.CA1061.severity = error
#### Implement IDisposable correctly
dotnet_diagnostic.CA1063.severity = error
#### Exceptions should be public
dotnet_diagnostic.CA1064.severity = warning
#### Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1065.severity = warning
#### CancellationToken parameters must come last
dotnet_diagnostic.CA1068.severity = error
#### Enums should not have duplicate values
dotnet_diagnostic.CA1069.severity = error

### Documentation rules
#### Avoid using cref tags with a prefix
dotnet_diagnostic.CA1200.severity = suggestion

### Globalization rules
#### Do not pass literals as localized parameters
dotnet_diagnostic.CA1303.severity = warning
#### Specify CultureInfo
dotnet_diagnostic.CA1304.severity = warning
#### Specify IFormatProvider
dotnet_diagnostic.CA1305.severity = warning
#### Specify StringComparison for clarity
dotnet_diagnostic.CA1307.severity = suggestion
#### Use ordinal StringComparison
dotnet_diagnostic.CA1309.severity = warning
#### Specify StringComparison for correctness
dotnet_diagnostic.CA1310.severity = warning

### Portability and interoperability rules
#### P/Invokes should not be visible
dotnet_diagnostic.CA1401.severity = warning
#### Validate platform compatibility - obsoleted APIs
dotnet_diagnostic.CA1422.severity = error

### Maintainability rules
#### Avoid excessive inheritance
dotnet_diagnostic.CA1501.severity = warning
#### Avoid excessive complexity
dotnet_diagnostic.CA1502.severity = warning
#### Avoid unmaintainable code
dotnet_diagnostic.CA1505.severity = warning
#### Avoid excessive class coupling
dotnet_diagnostic.CA1506.severity = warning
#### Use nameof in place of string
dotnet_diagnostic.CA1507.severity = warning
#### Avoid dead conditional code
dotnet_diagnostic.CA1508.severity = warning
#### Use ArgumentNullException throw helper
dotnet_diagnostic.CA1510.severity = warning
#### Use ArgumentException throw helper
dotnet_diagnostic.CA1511.severity = warning
#### Use ArgumentOutOfRangeException throw helper
dotnet_diagnostic.CA1512.severity = warning
#### Avoid redundant length argument
dotnet_diagnostic.CA1514.severity = warning

### Naming rules
#### Do not name enum values 'Reserved'
dotnet_diagnostic.CA1700.severity = error
#### Identifiers should not contain underscores
dotnet_diagnostic.CA1707.severity = suggestion
#### Identifiers should differ by more than case
dotnet_diagnostic.CA1708.severity = suggestion
#### Do not prefix enum values with type name
dotnet_diagnostic.CA1712.severity = error
#### Flags enums should have plural names
dotnet_diagnostic.CA1714.severity = warning
#### Identifiers should not match keywords
dotnet_diagnostic.CA1716.severity = error
#### Identifiers should not contain type names
dotnet_diagnostic.CA1720.severity = error
#### Type names should not match namespaces
dotnet_diagnostic.CA1724.severity = warning
#### Parameter names should match base declaration
dotnet_diagnostic.CA1725.severity = warning
#### Use PascalCase for named placeholders
dotnet_diagnostic.CA1727.severity = warning

### Performance rules
#### Use literals where appropriate
dotnet_diagnostic.CA1802.severity = warning
#### Avoid uninstantiated internal classes
dotnet_diagnostic.CA1812.severity = none
#### Avoid unsealed attributes
dotnet_diagnostic.CA1813.severity = suggestion
#### Prefer jagged arrays over multidimensional
dotnet_diagnostic.CA1814.severity = suggestion
#### Properties should not return arrays
dotnet_diagnostic.CA1819.severity = warning
#### Avoid unused private fields
dotnet_diagnostic.CA1823.severity = warning
#### Use property instead of Linq Enumerable method
dotnet_diagnostic.CA1826.severity = warning
#### Do not use Count()/LongCount() when Any() can be used
dotnet_diagnostic.CA1827.severity = warning
#### Do not use CountAsync/LongCountAsync when AnyAsync can be used
dotnet_diagnostic.CA1828.severity = warning
#### Use Length/Count property instead of Enumerable.Count method
dotnet_diagnostic.CA1829.severity = warning
#### Prefer strongly-typed Append and Insert method overloads on StringBuilder
dotnet_diagnostic.CA1830.severity = warning
#### Prefer the memory-based overloads of ReadAsync/WriteAsync methods in stream-based classes
dotnet_diagnostic.CA1835.severity = warning
#### Prefer Dictionary Contains methods
dotnet_diagnostic.CA1841.severity = warning
#### Use the LoggerMessage delegates
dotnet_diagnostic.CA1848.severity = none
#### Call async methods when in an async method
dotnet_diagnostic.CA1849.severity = warning
#### Possible multiple enumerations of IEnumerable collection
dotnet_diagnostic.CA1851.severity = warning
#### Seal internal types
dotnet_diagnostic.CA1852.severity = warning
#### Avoid using 'Enumerable.Any()' extension method
dotnet_diagnostic.CA1860.severity = warning
#### Avoid constant arrays as arguments
dotnet_diagnostic.CA1861.severity = warning
#### Use 'CompositeFormat'
dotnet_diagnostic.CA1863.severity = suggestion
#### Unnecessary call to 'Contains' for sets
dotnet_diagnostic.CA1868.severity = warning
#### Do not pass a nullable struct to 'ArgumentNullException.ThrowIfNull'
dotnet_diagnostic.CA1871.severity = warning

### SingleFile rules
#### Skipped while there is no quality enforce for Assembly related rules...

### Reliability rules
#### Dispose objects before losing scope
dotnet_diagnostic.CA2000.severity = warning
#### Do not directly await a Task
dotnet_diagnostic.CA2007.severity = silent
#### Do not assign property within its setter
dotnet_diagnostic.CA2011.severity = warning
#### Forward the CancellationToken parameter to methods that take one
dotnet_diagnostic.CA2016.severity = warning

### Security rules
#### Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2100.severity = error
#### Do not use insecure deserializer BinaryFormatter
dotnet_diagnostic.CA2300.severity = warning
#### Do not use TypeNameHandling values other than None
dotnet_diagnostic.CA2326.severity = warning
#### Do not use insecure JsonSerializerSettings
dotnet_diagnostic.CA2327.severity = warning
#### Review code for SQL injection vulnerabilities
dotnet_diagnostic.CA3001.severity = error
#### Review code for DLL injection vulnerabilities
dotnet_diagnostic.CA3011.severity = error
#### Review code for regex injection vulnerabilities
dotnet_diagnostic.CA3012.severity = error
#### Do Not Use Weak Cryptographic Algorithms
dotnet_diagnostic.CA5350.severity = error
#### Do Not Use Broken Cryptographic Algorithms
dotnet_diagnostic.CA5351.severity = error
#### Do Not Use Unsafe Cipher Modes
dotnet_diagnostic.CA5358.severity = error
#### Do not use deprecated security protocols
dotnet_diagnostic.CA5364.severity = error
#### Do not use deprecated SslProtocols values
dotnet_diagnostic.CA5397.severity = error

### Usage rules
#### Rethrow to preserve stack details
dotnet_diagnostic.CA2200.severity = error
#### Do not raise reserved exception types
dotnet_diagnostic.CA2201.severity = warning
#### Instantiate argument exceptions correctly
dotnet_diagnostic.CA2208.severity = warning
#### Non-constant fields should not be visible
dotnet_diagnostic.CA2211.severity = warning
#### Disposable fields should be disposed
dotnet_diagnostic.CA2213.severity = error
#### Dispose methods should call base class dispose
dotnet_diagnostic.CA2215.severity = error
#### Collection properties should be read only
dotnet_diagnostic.CA2227.severity = none
#### Provide correct arguments to formatting methods
dotnet_diagnostic.CA2241.severity = warning
#### Do not assign a property to itself
dotnet_diagnostic.CA2245.severity = error
#### Provide correct enum argument to Enum.HasFlag
dotnet_diagnostic.CA2248.severity = warning
#### Use ThrowIfCancellationRequested
dotnet_diagnostic.CA2250.severity = warning
#### Named placeholders should not be numeric values
dotnet_diagnostic.CA2253.severity = suggestion
#### Template should be a static expression
dotnet_diagnostic.CA2254.severity = none
#### Prefer generic overload when type is known
dotnet_diagnostic.CA2263.severity = warning


## Code Analysis Style Rules
### Language and unnecessary rules
#### Remove unnecessary cast
dotnet_diagnostic.IDE0004.severity = warning
#### Remove unnecessary using directives
dotnet_diagnostic.IDE0005.severity = warning
#### Add missing cases to switch statement
dotnet_diagnostic.IDE0010.severity = suggestion
#### Remove unreachable code
dotnet_diagnostic.IDE0035.severity = error
#### Remove unused private member
dotnet_diagnostic.IDE0051.severity = error
#### Remove unread private member
dotnet_diagnostic.IDE0052.severity = error
#### Add missing cases to switch expression
dotnet_diagnostic.IDE0072.severity = suggestion
#### Remove unnecessary suppression operator
dotnet_diagnostic.IDE0080.severity = error
#### Remove unnecessary equality operator
dotnet_diagnostic.IDE0100.severity = warning
#### Remove unnecessary discard
dotnet_diagnostic.IDE0110.severity = warning
#### Simplify LINQ expression
dotnet_diagnostic.IDE0120.severity = warning
#### Nullable directive is redundant
dotnet_diagnostic.IDE0240.severity = warning
#### Use 'nameof'
dotnet_diagnostic.IDE0280.severity = suggestion

### Miscellaneous rules
#### Skipped

### Formatting rules
#### All formatting options have rule ID IDE0055 and title Fix formatting
dotnet_diagnostic.IDE0055.severity = warning


## IDE-only rules
### Invalid JSON pattern
dotnet_diagnostic.JSON001.severity = error
### Probable JSON string detected
dotnet_diagnostic.JSON002.severity = suggestion


## Rules to consider
### Non-nullable field must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring as nullable.
dotnet_diagnostic.CS8618.severity = suggestion

;========================================================================================================================================================================

# C# test files
[*Tests.cs]

## Rules to avoid on test files

### Better redability
dotnet_diagnostic.CA1707.severity = none
